# This is a basic workflow to help you get started with Actions

name: Compile/Deploy Native Image To Heroku.
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [main]

# Your workflows jobs.
jobs:
  Build-Compile-Deploy:
    environment: manga-spring.com
    concurrency:
      group: concurrency-group-1
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "16"
          java-package: jdk
          architecture: x64

      - name: Cache Maven Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Build Artifact
        run: mvn clean package

      # - name: Set Month ENV for Docker Cache
      #   run: echo "MONTH=$(date +%m)" >> $GITHUB_ENV

      - name: Set Docker Cache Hash
        run: |
          DOCKERFILE=$(md5sum Dockerfile | awk '{ print $1 }')
          SRC=$(find somedir -type f -exec md5sum {} \; | sort -k 2 | md5sum | awk '{ print $1 }')
          echo "HASH=${DOCKERFILE}_${SRC}" >> $GITHUB_ENV

      - name: Cache Docker Layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # continue-on-error: true
        with:
          key: ${{ github.workflow }}-${{ env.HASH }}-{hash}
          restore-keys: |
            ${{ github.workflow }}-${{ env.HASH }}-

      - name: Multi-Stage Docker Build
        run: docker build -t registry.heroku.com/manga-spring/web .

      - name: Push Image to Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login && docker push registry.heroku.com/manga-spring/web

      - name: Deploy
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web -a manga-spring

      - name: Prune Uneeded Images Before Caching
        if: always()
        run: |
          docker image prune -a --force --filter "label=tag!=${{github.sha }}"

      - name: Remove all Images
        if: cancelled()
        run: |
          docker image prune -a --force"
